// controllers/recipeController.js
const asyncHandler = require('express-async-handler');
const Recipe = require('../models/Recipe');
const { validationResult } = require('express-validator');

/**
 * @desc    
 * @route   
 * @access  
 */
const createRecipe = asyncHandler(async (req, res) => {
  
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ message: 'Validation error', errors: errors.array() });
  }

  const {
    title,
    description = '',
    ingredients,
    steps,
    prepTimeMinutes = 0,
    cookTimeMinutes = 0,
    servings = 1,
  } = req.body;

  const recipe = new Recipe({
    title,
    description,
    ingredients,
    steps,
    prepTimeMinutes,
    cookTimeMinutes,
    servings,
  });

  const created = await recipe.save();
  res.status(201).json(created);
});

/**
 * @desc    
 * @route   
 * @access  
 */
const getAllRecipes = asyncHandler(async (req, res) => {
  const { page = 1, limit = 20, q } = req.query;

  const filter = {};
  if (q) filter.title = { $regex: q, $options: 'i' };

  const skip = (Math.max(1, Number(page)) - 1) * Number(limit);
  const total = await Recipe.countDocuments(filter);
  const recipes = await Recipe.find(filter)
    .sort({ createdAt: -1 })
    .skip(skip)
    .limit(Number(limit));

  res.json({
    page: Number(page),
    limit: Number(limit),
    total,
    data: recipes,
  });
});

/**
 * @desc    
 * @route   
 * @access  
 */
const getRecipeById = asyncHandler(async (req, res) => {
  const recipe = await Recipe.findById(req.params.id);
  if (!recipe) {
    res.status(404);
    throw new Error('Recipe not found');
  }
  res.json(recipe);
});

/**
 * @desc    
 * @route  
 * @access  
 */
const updateRecipe = asyncHandler(async (req, res) => {

  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ message: 'Validation error', errors: errors.array() });
  }

  const recipe = await Recipe.findById(req.params.id);
  if (!recipe) {
    res.status(404);
    throw new Error('Recipe not found');
  }

  const updatableFields = [
    'title',
    'description',
    'ingredients',
    'steps',
    'prepTimeMinutes',
    'cookTimeMinutes',
    'servings',
  ];

  updatableFields.forEach((field) => {
    if (req.body[field] !== undefined) recipe[field] = req.body[field];
  });

  const updated = await recipe.save();
  res.json(updated);
});

/**
 * @desc    
 * @route   
 * @access 
 */
const deleteRecipe = asyncHandler(async (req, res) => {
  const recipe = await Recipe.findById(req.params.id);
  if (!recipe) {
    res.status(404);
    throw new Error('Recipe not found');
  }

 
  await recipe.deleteOne();

  res.json({ message: 'Recipe deleted successfully' });
});

module.exports = {
  createRecipe,
  getAllRecipes,
  getRecipeById,
  updateRecipe,
  deleteRecipe,
};
